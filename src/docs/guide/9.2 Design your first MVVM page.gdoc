h3. Case scenario
I will use a search example to show how you can archive MVVM design pattern in Grails ZK UI by using ZK Bind. Please imagine yourself creating a search page in which the searching of an item is done by a filter string; the search result of items is displayed in a list and when selecting on an item, it will also show the details of the selected item.

h3. Create Domain class
{code:java}
grails create-domain-class item
{code}


Modify the @Item@ Domain class:
{code}
class Item {
    String name
    String description
    double price
    int quantity

    Item() {
    }

    public Item(String name, String description, double price, int quantity) {
        this.name = name
        this.description = description
        this.price = price
        this.quantity = quantity
    }

    public double getTotalPrice() {
        return price * quantity
    }

    static constraints = {
    }
}
{code}

h3. Create the @search@ service
{code:java}
grails create-service search
{code}

Modify the SearchService:
{code}
class SearchService {

    List<Item> search(String fitler) {
        if ("*".equals(fitler)) return Item.list()
        return Item.findAllByNameIlike("%${fitler}%")
    }
}
{code}

h3. Design the View Model
Follow the design concept of MVVM, we should design the view model first, we should not consider the visual effect. A view model should not depend on a View, but consider the data and actions as it contract for interacting with the View. In this scenario, we need a String as a filter and a ListModelList<Item> for the search result and a doSearch() method to perform the search command. Further, we also need a selected filed to keep the item which is currently selected.
As you can see, I am defending a View Model and it is isolated from the View, which means that it is possible to be reused by another View and even tested by pure Java code. Following is the code of the View Model.

{code:java}
grails create-view-model demo.search
{code}

The above command will generate the ViewModel in grails-app/vms/SearchVM.groovy

Modify the ViewModel :
{code}
class SearchVM {
    //the search condition
    String filter = "*"

    //the search result
    ListModelList<Item> items

    //the selected item
    Item selected

    //inject the SearchService
    def searchService

    public String getFilter() {
        return filter
    }

    @NotifyChange
    public void setFilter(String filter) {
        this.filter = filter
    }

    public ListModel<Item> getItems() {
        if (items == null) {
            doSearch()
        }
        return items
    }

    @NotifyChange(["items", "selected"])
    public void doSearch() {
        items = new ListModelList<Item>()
        items.addAll(searchService.search(filter))
        selected = null
    }

    public Item getSelected() {
        return selected
    }

    @NotifyChange
    public void setSelected(Item selected) {
        this.selected = selected
    }

    Converter totalPriceConverter = null

    public Converter getTotalPriceConverter() {
        if (totalPriceConverter != null) {
            return totalPriceConverter
        }
        return totalPriceConverter = new Converter() {
            public Object coerceToBean(Object val, Component component, BindContext ctx) {
                return null//never called in this example
            }

            public Object coerceToUi(Object val, Component component, BindContext ctx) {
                if (val == null) return null
                String str = new DecimalFormat('$ ###,###,###,##0.00').format((Double) val)
                return str
            }
        }
    }
}
{code}

SearchVM is created by grails command @create-view-model@ ,we need to notify ZK Bind that the properties of this @View Model@ were changed. In ZK Bind, it has the binder to help the binding between View and View Model. By adding \@NotifyChange on a setter method of a property, after binder set the property, it is noticed to reload components that bind to this property. Add \@NotifyChange on a command method, after Binder executes the method, it is noticed to reload components that bind to these properties.
For example, I add \@NotifyChange on setFilter, when binder sets the value by setFilter(), it is noticed to reload any binding that is related to filter property of the view model. I also added \@NotifyChange(["items","selected"]) on doSearch(), that is because when doing the search, I will search by the filter and has a new item list and also reset selected to null, so I need to notify Binder this 2 properties was changed.
With @NotifyChange, it let binder knows when to reload the view automatically.

h3. Design a View with ZK Bind
After the View Mode is ready, we are now able to bind View to View Model, not only the data, but also the action, and reloading the changed data automatically (thanks the @NotifyChange in SearchVM).
Here is the designed View that will be use in this article to bind with View Model:
!mvvm-in-zk6-view-example.png!

h3. Apply the BindComposer

Now, we have to create a ‘search.gsp’ and bind it to the View Model. To do this, set the ‘apply’ attribute to ‘org.zkoss.bind.BindComposer’ as the composer, and bind the ‘viewModel’ to ‘SearchVM’ that was just created. BindComposer will read all the ZK Bind syntax and create a binder to bind View and View Model.

{code}
<z:window title="Search Storage Item" border="normal" width="600px"
    apply="org.zkoss.bind.BindComposer" viewModel="\@bind(vm='demo.SearchVM')" >
...

</z:window>
{code}

The \@bind(name=expression) here, is the syntax to assign a View Model to the binder, ‘name’ is the name of the View Model which will be referenced in nested binding. ‘expression’ is an EL 2.2 expression and there are some rules about this expression; if the evaluated result is a ‘String’, it uses ‘String’ as a class name to create the view model whereas if the result is a ‘Class’, it creates the View Model by ‘Class.newInstance()’. Moreover, if the result is a non-primitive Object then it will use it directly, other-wise, it complains an exception.

h3. Binding the textbox with filter data

We need a textbox to represent the filter data, when user types in the textbox, the data will automatically update to ‘vm.filter’, and we also want the search button disabled if the value of ‘vm.filter’ is empty.

*View : search.gsp*
{code}
<z:textbox value="\@bind(vm.filter)" instant="true"/>
<z:button label="Search" disabled="\@bind(empty vm.filter)"/>
{code}

The \@bind(expression) here, is the two-way binding syntax to bind component’s attribute and the VM’s property together, it constructs a prompt binding, which means that the change of a component’s attribute caused by a user’s action will also be saved to the VM’s property. And any changed notification of the property will cause a reload of the component.
In the above example, I have binded the ‘vm.filter’ to the ‘value’ attribute of the textbox, and the ‘disabled’ attribute of the button. When editing the textbox, ‘vm.filter’ will be changed and the button will immediately be enabled or disabled depending on the value of ‘vm.filter’.

h3. Binding the listbox with search result

In ZK 6, we introduce a new feature called ‘template’, it is a perfect matching when binding a collection. We will have a listbox and a template to show the search result.

*View : search.gsp*
{code}
<z:listbox model="\@bind(vm.items)" selectedItem="\@bind(vm.selected)" hflex="true" height="300px">
    <z:listhead>
        <z:listheader label="Name"/>
        <z:listheader label="Price" align="center" width="80px"/>
        <z:listheader label="Quantity" align="center" width="80px"/>
    </z:listhead>
    <z:template name="model" var="item">
        <listitem>
            <listcell label="\@bind(item.name)"/>
            <listcell label="\@bind(item.price) \@converter('formatedNumber', format='###,##0.00')"/>
            <listcell label="\@bind(item.quantity)" sclass="\@bind(item.quantity lt 3 ?'red':'')"/>
        </listitem>
    </z:template>
</z:listbox>
{code}

The \@bind(expression) can also apply to ‘model’ attribute of a component. When binding to a model, we have to provide a template, which name is ‘model’, to render each item in the model. In the template, we have to set the name of ‘var’, so we could use it as an item in the template. We also introduce the \@converter(expression) syntax, so you can write a ‘Converter’ to convert data to attribute when loading to component, and convert back when saving to bean.
In the above example, the ‘model’ of listbox binds to ‘vm.items’, and the ‘selectedItem’ binds to ‘vm.selected’ with a template that has responsibility to render each item of the ‘vm.items’. Of course, we could also use \@bind in the template, even bind to a ‘sclass’ attribute of a listcell with a flexible expression ‘item.quantity lt 3?’red’:’’’. Look into ‘item.price’, it is a double, I want it to be shown with an expected format, therefore a built-in converter ‘formatedNumber’ and a format argument ‘###,##0.00’ are used.

h3. Binding the selected item
When binding the listbox, we also bind the ‘selectedItem’ of listbox to ‘selected’ property of View Model. You do not need to worry about selectedItem(in which its value type is a Listitem) of listbox being the incorrect data type of the model because binder will convert it to item automatically. By the binding of ‘selectedItem’, when selecting an item in the listbox, the ‘selected’ property will be updated to the selected item and displayed in detail.

*View : search.gsp*
{code}
<z:groupbox visible="\@bind(not empty vm.selected)" hflex="true" mold="3d">
    <z:caption label="\@bind(vm.selected.name)"/>
    <z:grid hflex="true">
        <z:columns>
            <z:column width="120px"/>
            <z:column/>
        </z:columns>
        <z:rows>
            <z:row>
                Description <z:label value="\@bind(vm.selected.description)"/>
            </z:row>
            <z:row>
                Price <z:label value="\@bind(vm.selected.price) \@converter('formatedNumber', format='###,##0.00')"/>
            </z:row>
            <z:row>
                Quantity <z:label value="\@bind(vm.selected.quantity)" sclass="\@bind(vm.selected.quantity lt 3 ?'red':'')"/>
            </z:row>
            <z:row>
                Total Price <z:label value="\@bind(vm.selected.totalPrice) \@converter(vm.totalPriceConverter)"/>
            </z:row>
        </z:rows>
    </z:grid>
</z:groupbox>
{code}
In the example above, we bind ‘visible’ attribute of groupbox with the expression ‘not empty vm.selected’, so that the groupbox will only appear visible when user selects an item. Oppositely, if no item is selected, this groupbox will not show up. The \@converter() is used again here but with some differences. The converter now comes from the View Model . Of course, a ‘getTotalPriceConverter’ method needs to be prepared in View Model and return a Converter.

*ViewModel : SearchVM.groovy*
{code}
 Converter totalPriceConverter = null

 public Converter getTotalPriceConverter() {
     if (totalPriceConverter != null) {
         return totalPriceConverter
     }
     return totalPriceConverter = new Converter() {
         public Object coerceToBean(Object val, Component component, BindContext ctx) {
             return null//never called in this example
         }

         public Object coerceToUi(Object val, Component component, BindContext ctx) {
             if (val == null) return null
             String str = new DecimalFormat('$ ###,###,###,##0.00').format((Double) val)
             return str
         }
     }
 }
{code}

h3. Binding the button action to a command
Now, we have to perform a command of the View Model when clicking on the search button. To do so, add a \@bind in the onClick event of the button.

{code}
<z:button label="Search" onClick="\@bind('doSearch')" disabled="\@bind(empty vm.filter)"/>
{code}

The @bind(expression) syntax in the event of a component represents the binding of an event to a command of the View Model. It has some rules.
# The evaluation result of the expression result has to be a ‘String’,
# The string must also be the name of the command
# View model must have an executable method that has the name of the command.

In the case above, onClick is binded with a ‘doSearch’ command. When clicking on the button, binder will go through the command lifecycle (we will talk about this in another smalltalk ,[link when ready]) and execute the doSearch method of view model.

h3. The all:*search.gsp*

{code:xml}
<%@ page contentType="text/html;charset=UTF-8" %>
<html>
<head>
    <title>MVVM Demo</title>
    <z:resources/>
    <style type="text/css">
    .z-listcell.red .z-listcell-cnt, .z-label.red {
        color: red;
    }
    </style>
</head>

<body>
<z:window title="Search Storage Item" border="normal" width="600px"
          apply="org.zkoss.bind.BindComposer" viewModel="\@bind(vm='zkui6demo.SearchVM')">
    <z:vbox hflex="true">
        <z:hbox>
            Filter :
            <z:textbox value="\@bind(vm.filter)" instant="true"/>
            <z:button label="Search" onClick="\@bind('doSearch')" disabled="\@bind(empty vm.filter)"/>
        </z:hbox>
        <z:listbox model="\@bind(vm.items)" selectedItem="\@bind(vm.selected)" hflex="true" height="300px">
            <z:listhead>
                <z:listheader label="Name"/>
                <z:listheader label="Price" align="center" width="80px"/>
                <z:listheader label="Quantity" align="center" width="80px"/>
            </z:listhead>
            <z:template name="model" var="item">
                <listitem>
                    <listcell label="\@bind(item.name)"/>
                    <listcell label="\@bind(item.price) \@converter('formatedNumber', format='###,##0.00')"/>
                    <listcell label="\@bind(item.quantity)" sclass="\@bind(item.quantity lt 3 ?'red':'')"/>
                </listitem>
            </z:template>
        </z:listbox>
        <z:groupbox visible="\@bind(not empty vm.selected)" hflex="true" mold="3d">
            <z:caption label="\@bind(vm.selected.name)"/>
            <z:grid hflex="true">
                <z:columns>
                    <z:column width="120px"/>
                    <z:column/>
                </z:columns>
                <z:rows>
                    <z:row>
                        Description <z:label value="\@bind(vm.selected.description)"/>
                    </z:row>
                    <z:row>
                        Price <z:label value="\@bind(vm.selected.price) \@converter('formatedNumber', format='###,##0.00')"/>
                    </z:row>
                    <z:row>
                        Quantity <z:label value="\@bind(vm.selected.quantity)" sclass="\@bind(vm.selected.quantity lt 3 ?'red':'')"/>
                    </z:row>
                    <z:row>
                        Total Price <z:label value="\@bind(vm.selected.totalPrice) \@converter(vm.totalPriceConverter)"/>
                    </z:row>
                </z:rows>
            </z:grid>
        </z:groupbox>
    </z:vbox>
</z:window>
</body>
</html>
{code}

h3. Initialization data

Initialization data in  BootStrap.groovy

{code}
class BootStrap {

    def init = { servletContext ->
        List<Item> allItems = new ArrayList<Item>()
        allItems.add(new Item("P001-A", "part 001, type A", nextPrice(), nextQuantity()))
        allItems.add(new Item("P001-B", "part 001, type B", nextPrice(), nextQuantity()))
        allItems.add(new Item("P001-C", "part 001, type C", nextPrice(), nextQuantity()))
        allItems.add(new Item("P001-D", "part 001, type D", nextPrice(), nextQuantity()))
        allItems.add(new Item("P001-E", "part 001, type E", nextPrice(), nextQuantity()))

        allItems.add(new Item("P002-A", "part 001, type A", nextPrice(), nextQuantity()))
        allItems.add(new Item("P002-B", "part 001, type B", nextPrice(), nextQuantity()))
        allItems.add(new Item("P002-C", "part 001, type C", nextPrice(), nextQuantity()))
        allItems.add(new Item("P002-D", "part 001, type D", nextPrice(), nextQuantity()))
        allItems.add(new Item("P002-E", "part 001, type E", nextPrice(), nextQuantity()))

        allItems.add(new Item("P003-A", "part 001, type A", nextPrice(), nextQuantity()))
        allItems.add(new Item("P003-B", "part 001, type B", nextPrice(), nextQuantity()))
        allItems.add(new Item("P003-C", "part 001, type C", nextPrice(), nextQuantity()))
        allItems.add(new Item("P003-D", "part 001, type D", nextPrice(), nextQuantity()))
        allItems.add(new Item("P003-E", "part 001, type E", nextPrice(), nextQuantity()))

        allItems.add(new Item("P004-A", "part 001, type A", nextPrice(), nextQuantity()))
        allItems.add(new Item("P004-B", "part 001, type B", nextPrice(), nextQuantity()))
        allItems.add(new Item("P004-C", "part 001, type C", nextPrice(), nextQuantity()))
        allItems.add(new Item("P004-D", "part 001, type D", nextPrice(), nextQuantity()))
        allItems.add(new Item("P004-E", "part 001, type E", nextPrice(), nextQuantity()))
        allItems*.save()
    }

    Random r = new Random(System.currentTimeMillis())

    double nextPrice() {
        return r.nextDouble() * 300
    }

    int nextQuantity() {
        return r.nextInt(10)
    }

    def destroy = {
    }
}
{code}



h3. Downloads ZK UI MVVM Demo

https://github.com/downloads/xiaochong/zkui/zkui-mvvm-demo.zip


h3. More...

[Small Talks/2011/November/MVVM in ZK 6 - Design your first MVVM page|http://books.zkoss.org/wiki/Small_Talks/2011/November/MVVM_in_ZK_6_-_Design_your_first_MVVM_page]


