h1. script

h2. Purpose

The script component is used to specify the script codes running at the browser. Notice that, unlike zscript, the script codes are running at the browser. They are usually written in JavaScript which is supported by the most of browsers. The simplest format is as follows.

h2. Examples

!script.png!

{code:xml}
<z:window title="Grid Demo" border="normal" width="360px">
    <z:grid>
        <z:columns sizable="true">
            <z:column label="Type" width="50px"/>
            <z:column label="Content"/>
        </z:columns>
        <z:rows>
            <z:row>
                <z:label value="File:"/>
                <z:textbox width="99%"/>
            </z:row>
            <z:row>
                <z:label value="Type:"/>
                <z:hbox>
                    <z:listbox rows="1" mold="select">
                        <z:listitem label="Java Files,(*.java)"/>
                        <z:listitem label="All Files,(*.*)"/>
                    </z:listbox>
                    <z:button label="Browse..."/>
                </z:hbox>
            </z:row>
            <z:row>
                <z:label value="Options:"/>
                <z:textbox rows="3" width="99%"/>
            </z:row>
        </z:rows>
    </z:grid>
</z:window>
{code}

h2. Description

Attributes

* @src@ (optional) - Sets the URI of the source that contains the script codes. You either add the script codes directly with the Label children, or set the URI to load the script codes with setSrc(java.lang.String). But, not both. [see more|http://www.zkoss.org/javadoc/latest/zk/org/zkoss/zul/Script.html#setSrc(java.lang.String)]
* @content@ (optional) - Sets the content of the script element. By content we mean the JavaScript codes that will be enclosed by the HTML SCRIPT element. [see more|http://www.zkoss.org/javadoc/latest/zk/org/zkoss/zul/Script.html#setContent(java.lang.String)]
* @char@ (optional) - Sets the character encoding of the source. It is used with setSrc(java.lang.String). Refer to HTML Character Setsfor more information. [see more|http://www.zkoss.org/javadoc/latest/zk/org/zkoss/zul/Script.html#setCharset(java.lang.String)]
* @defer@ (optional) - Sets whether to defer the execution of the script codes. [see more|http://www.zkoss.org/javadoc/latest/zk/org/zkoss/zul/Script.html#setDefer(boolean)]
* @packages@ (optional) - Sets the list of packages to load before evaluating the script defined in getContent(). If more than a package to load, separate them with comma. [see more|http://www.zkoss.org/javadoc/latest/zk/org/zkoss/zul/Script.html#setPackages(java.lang.String)]
* @type@ (optional) - Deprecated.Â  As of release 5.0.0, it is meaningless since text/javascript is always assumed. [see more|http://www.zkoss.org/javadoc/latest/zk/org/zkoss/zul/Script.html#setType(java.lang.String)]
* @id@ (optional) - Description copied from interface: Component Sets the ID. The scope of uniqueness depends on whether this component is a root component. Refer to Component.getId() for more details. Default: "" (an empty string; it means no ID at all). [see more|http://www.zkoss.org/javadoc/latest/zk/org/zkoss/zk/ui/AbstractComponent.html#setId(java.lang.String)]
* @mold@ (optional) - Description copied from interface: Component Sets the mold to render this component. [see more|http://www.zkoss.org/javadoc/latest/zk/org/zkoss/zk/ui/AbstractComponent.html#setMold(java.lang.String)]
* @widgetClass@ (optional) - Description copied from interface: Component Sets the widget class (aka., the widget type). The widget class is a JavaScript class, including the package name. For example, "zul.wnd.Window". [see more|http://www.zkoss.org/javadoc/latest/zk/org/zkoss/zk/ui/AbstractComponent.html#setWidgetClass(java.lang.String)]
* @stubonly@ (optional) - Description copied from interface: Component Sets whether this component is stub-only. By stub-only, we mean we don't need to maintain the states of the component at the server side. Default: "inherit" (i.e., the same as the parent's stub-only, and "false" is assumed if none of parents is specified with stub-only). If a component is set to stub-only, the application running at the server shall not access it anymore after renderred to the client. The ZK loader will try to minimize the memory footprint by merging stub-only components and replacing with light-weight components. However, the event listeners and handlers are preserved, so they will be invoked if the corresponding event is received. Since the original component is gone, the event is the more generic format: an instance of Event (rather than MouseEvent or others). If a component is stub-only, the application usually access it only at the client since all widgets are preserved at the client (so are events). This method is available only for ZK EE. [see more|http://www.zkoss.org/javadoc/latest/zk/org/zkoss/zk/ui/AbstractComponent.html#setStubonly(java.lang.String)]
* @definition@ (optional) - Description copied from interface: ComponentCtrl Sets the component definition by specifing the name. [see more|http://www.zkoss.org/javadoc/latest/zk/org/zkoss/zk/ui/AbstractComponent.html#setDefinition(java.lang.String)]
* @visible@ (optional) - Description copied from interface: Component Sets whether this component is visible. [see more|http://www.zkoss.org/javadoc/latest/zk/org/zkoss/zk/ui/AbstractComponent.html#setVisible(boolean)]



h1. ZK Official Reference

h2. Component Reference

[Show script Component Reference|http://books.zkoss.org/wiki/ZK Component Reference/Essential Components/Script]

h2. Java API

[Show script Java API|http://www.zkoss.org/javadoc/latest/zk/org/zkoss/zul/Script.html]

