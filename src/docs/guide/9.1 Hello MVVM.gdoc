h3. The example - On Demand Hello World!

The use case: Press a button on the screen and show on the screen a message provided by the Model, say, "Hello World!".

h3. MVP Implementation
!MVP_HELLO_FLOW.png!

# A user push a button(an action) on the screen. A corresponding event is fired.
# An event listener on the back-end handles this event.
# Access data and so on.
# Then UI elements were changed accordingly to provide visual feedback to the user.

@View@: helloMVP.gsp

{code:xml}
<z:window apply="HelloComposer">
    <z:label id="lbl"/>
    <z:button id="btn" label="Show"/>
</z:window>
{code}

@Presenter@: HelloComposer.groovy

{code}
class HelloComposer{
    def lbl

    def onClick_btn(Event event) {
        lbl.setValue("Hello World!")
    }
}
{code}

The Presenter was injected with the View components Label lbl and the event listener onClick_btn(). As shown above, the characteristics of a MVP design pattern is that the Presenter(the Controller) would need to hold references to the View layer UI components so that it can update the states of the View and generate visual feedback. As in this example, the value of the Label component lbl is updated with "Hello World" and provides visual feedback to the user.

h3. MVVM Implementation
!MVVM_HELLO_FLOW.png!

As stated in the paragraph earlier, data binder plays the role of syncing data between UI and ViewModel.
# A user presses a button on the screen.
# A corresponding event is fired to the binder.
# The binder finds the corresponding action logic in the ViewModel and calls it.
# The action logic accesses data from Model layer and updates corresponding properties of the ViewModel.
# ViewModel notify the binder that some properties have been changed.
# Per what properties have been changed, the binder loads data from the ViewModel.
# Binder then updates the corresponding UI controls to provide visual feedback to the user.

Apparently, UI designer has to tell binder at least the following things:
* Which UI event is used to proceed which action logic? (so binder knows what method to call).
* Which UI attribute is used to show which data? (so binder knows what to load and what to update).
* Which UI attribute is used to input into which data? (so binder knows what property to save).

In ZK Bind, ZK Annotation is utilized to do these jobs:
@View@: helloMVVM.gsp
{code:xml}
<z:window apply="org.zkoss.bind.BindComposer" viewModel="\@id('vm')\@init('demo.HelloVM')">
    <z:label value="\@bind(vm.message)"/>
    <z:button label="Show" onClick="\@command('showHello')"/>
</z:window>
{code}

@ViewModel@: HelloVM.groovy
{code}
class HelloVM {
    private String message

    public String getMessage() {
        return message
    }

    \@Command \@NotifyChange("message")
    public void showHello() {
        message = "Hello World!"
    }

}
{code}

Per this example, let's run through the program flow:
# When end user press the "Show" button, the onClick event is fired to binder.
# The binder finds that the command name in the ViewModel which is "showHello" as specified in the ZK annotation @command('showHello').
# The binder calls the showHello() method in the HelloVM and changes the message property. Note that the @NotifyChange("message") Java method annotation on showHello() method in HelloVM. It tells the binder that the property message in the HelloVM will be changed if this command is called.
# The binder then finds that the attribute value of component label is associated with the changed message property of the HelloVM(as specified in ZK annotation @bind(vm.message)). So it loads data from the property vm.message and updates the label's value attribute. The new message "Hello World!" is then shown on the screen and provides the visual feedback to the end user.

In this MVVM implementation with data binding system, the HelloVM is a simple POJO and refers none of the UI components. It only exposes the message contents via getMessage() and provides the necessary action logic showHello(). It does not know how these information or action logic will be used. It is the UI designer's job to decide which UI components are to be used in which layout as seen in HelloMVVM.gsp.

h3. The example revised -- Pop Up the Message

Customers tend to change their minds when they see the real screen. Say, after you demonstrated the program to a customer and he/she said, "Well, I thought the Hello World! message should be in a pop up window...".
No problem, let's prepare a modal window and put the message in the modal window. Easy.

h3. Revised MVP Implementation

View: helloMVP2.gsp
{code:xml}
<z:window apply="Hello2Composer">
    <z:button id="btn" label="Show"/>
    <z:window id="popwin" title="Hello" width="300px" height="200px" visible="false">
        <z:hbox align="center" pack="center" hflex="true" vflex="true">
            <z:label id="lbl"/>
        </z:hbox>
    </z:window>
</z:window>
{code}

Presenter: Hello2Composer.groovy
{code:xml}
class Hello2Composer extends GenericForwardComposer {
    private Label popwin_lbl
    private Window popwin

    Hello2Composer() {
        super('_' as char)
    }

    public void onClick_btn(Event event) {
        popwin_lbl.setValue("Hello World!")
        popwin.doModal()
    }
}
{code}

The View gsp file has to be revised and the Presenter java file has to be totally rewritten. This time, it injects the pop up window popwin, the label popwin_lbl inside the pop up window and so on because the View has changed.

h3. Revised MVVM Implementation

View: helloMVVM2.gsp
{code:xml}
<z:window apply="org.zkoss.bind.BindComposer"
          viewModel="\@id('vm')\@init('demo.HelloVM')">
    <z:button label="Show" onClick="\@command('showHello')"/>
    <z:window title="Hello" width="300px" height="200px" mode="modal"
              visible="\@bind(not empty vm.message)">
        <z:hbox align="center" pack="center" hflex="true" vflex="true">
            <z:label value="\@bind(vm.message)"/>
        </z:hbox>
    </z:window>
</z:window>
{code}

The advantages of using MVVM design pattern comes in when customers changes their requirements on the View. UI Designers can proceed the changes independently and the HelloVM java file does not have to be changed because what the customer required was to change the way how the message is presented not the message itself. Notice that here the show/hide of the modal window is controlled whether the message is empty or not(visible="@bind(not empty vm.message)").


h3. See more
[Small Talks/2011/November/Hello ZK MVVM|http://books.zkoss.org/wiki/Small%20Talks/2011/November/Hello%20ZK%20MVVM]