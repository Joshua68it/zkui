h3. Introduction
ZK Bind is a whole new data binding system with new specifications and implementations.

h3. Features

h4. A whole new, clean annotation expression
* Same Java style annotation expression: The new ZK annotation is consistent with Java's annotation style. If you know the Java style, you know the ZK Style.
* A set of collaborated annotations: ZK Bind uses a set of annotations to make the use of data binding as intuitive and clear as possible.
** @bind(...): used to bind data and command along with parameters
** @converter(...): used to specify converters along with parameters
** @valiator(...): used to specify validators along with parameters
** @form(...): used to bind a form.

h4. EL 2.2 flexiable expressions
* ZK Bind accept EL 2.2 syntax expression that you can provide flexible operations easily.
* Bind to bean properties, indexed properties, Map keys seamlessly.
* Bind to component custom attributes automatically.
* Bind to Spring, CDI, and Seam managed bean automatically.
{code:xml}
<z:image src="@bind(vm.person.boy ? 'boy.png' : 'girl.png')"/>

<z:button onClick="@bind(vm.add ? 'add' : 'update')" label="@bind(vm.add ? 'Add' : 'Update'"/>

<z:button onClick="@bind('subscribe')" disabled="@bind(empty vm.symbol)" label="Subscribe"/>
{code}

h4. One way load only data binding
* Load when bean property changes
* Conditional load @after@/@before@ executing a command
* Multiple conditional load @before@/@after@ executing different/same commands

{code:xml}
<z:label value="@bind(load=vm.person.fullname)"/>

<z:label value="@bind(load=vm.person.firstname after 'update')"/>

<z:label value="@bind(load=vm.person.firstname before 'delete')"/>

<z:label value="@bind(load={vm.person.firstname after 'update', vm.person.message after 'delete'})"/>
{code}

h4. One way save only data binding
* Save when UI component attribute changes
* Multiple save to property of different target beans
* Conditional save before/after executing a command
* Multiple conditional save before/after executing different/same commands

{code:xml}
<z:textbox value="@bind(save=vm.person.firstname)"/>

<z:textbox value="@bind(save={vm.person.firstname, vm.tmpperson.firstname})"/>

<z:textbox value="@bind(save=vm.person.firstname before 'update')"/>

<z:textbox value="@bind(save=vm.person.firstname after 'delete'"/>

<z:textbox value="@bind(save={vm.selected.firstname before 'update', vm.newperson.firstname before 'add'}"/>
{code}

h4. Initial data binding
* Load when UI components are first added into the binding system
{code:xml}
 <z:label value="@bind(init=vm.selected.firstname)"/>
{code}

h4. Two way data binding
* Short expression of both save and load bindings
* Multiple conditional load and save on different back-end beans before/after executing different/same commands
{code:xml}
<z:textbox value="@bind(vm.person.firstname)"/>

<z:textbox value="@bind(load=vm.selected.firstname, save={vm.selected.firstname, vm.newperson.firstname before 'add'})"/>
{code}

h4. Bind to any attributes of the UI components
* Bind symmetrically to all attributes of UI components
{code:xml}
<z:textbox value="@bind(vm.symbol)" instant="true"/>
<z:button onClick="@bind('subscribe')" disabled="@bind(empty vm.symbol)" label="Subscribe" />
{code}

h4. Event command binding
* Bridge ZK event to command
* Automatic event listener registration
* Simple command name invocation
{code:xml}
<z:button onClick="@bind('subscribe')" disabled="@bind(empty vm.symbol)" label="Subscribe" />
{code}

h4. Template/Collection binding
* Binding on Listbox/Grid/Tree/Combobox
* Local variable scope is limited to the container component
* Support index property
{code:xml}
<z:listbox width="300px" model="@bind(vm.albumList)" selectedItem="@bind(vm.selectedAlbum)" vflex="true">
    <z:template name="model" var="a">
        <listitem label="@bind(a.title)"/>
    </z:template>
</z:listbox>
{code}

h4. Form binding
* Middle form binding to avoid affecting back-end data beans
* Submit a form in a whole
* Conditional save for different commands
{code:xml}
<z:grid self="@form(id='fx', load=vm.selected, save={vm.selected before 'update', vm.newAlbum before 'add'})">
    <z:row>Title: <z:textbox value="@bind(fx.title)"/></z:row>
    <z:row>Artist: <z:textbox value="@bind(fx.artist)"/></z:row>
    <z:row><z:checkbox checked="@bind(fx.classical)"/> Classical</z:row>
    <z:row>Composer: <z:textbox value="@bind(fx.composer)"/></z:row>
</z:grid>
<z:button onClick="@bind('add')" label="Add"/>
<z:button onClick="@bind('update')" label="Update"/>
{code}

h4. Java annotated data dependency tracking
* Controllable load on save
* @NotifyChange to notify property changes
* @DependsOn to specify property change dependency
{code}
@NotifyChange //notify firstname change
public void setFirstname(String fn) {
    firstname = fn;
}

@NotifyChange //notify lastname change
public void setLastname(String ln) {
    lastname = ln;
}

@DependsOn({"firstname","lastname"}) //full name will change if either firstname and/or lastname change
public String getFullname() {
    return firstname + " " + lastname;
}
{code}

h4. Embedded validation cycle
* Bind validator by name or by EL expression
* Embedded system Validator: provide commonly used validators that user can use directly by specifying only the name
* Validate a single property or a form
* Validate on a command
{code:xml}
<z:textbox value="@bind(save=vm.selected.firstname) @validator('noEmpty')"/>
<z:grid self="@form(id='fx', load=vm.selected, save=vm.selected before 'update') @validator(vm.passwordValidator)">
    <z:row>username<textbox value="@bind(fx.username)"/></z:row>
    <z:row>password<textbox value="@bind(fx.password)" type="password"/></z:row>
    <z:row>retype password<textbox value="@bind(fx.retypePassword)" type="password"/></z:row>
</z:grid>
{code}

h4. Enhanced converter mechanism
* Bind converter by name or by EL expression
* Embedded system Converters: provide commonly used converters that user can use directly by specifying only the name
{code:xml}
<z:datebox value="@bind(vm.selected.birthday) @converter('formatedDate', format='yyyy/MM/dd')"/>
{code}

h4. org.zkoss.bind.BindComposer
* Ease UI components, binder, and ViewModel association
* Each binder covers only the applied component tree
* Inter-binder communications
{code:xml}
<z:window apply="org.zkoss.bind.BindComposer" viewModel="@bind(vm='org.zkoss.mvvm.examples.album.AlbumViewModel')">
    ...
</z:window>
{code}

h4. Bind on demand
* Support dynamically add/remove bindings by API.
* Attached components with binding annotations are automatically managed by the existing binder if covered.
* Detached components that were managed by a binder are automatically removed from the binding management.

h4. Support seamless MVVM design pattern
* Utilize MVVM design pattern to achieve separation of data and logic from presentation easily.
** UI Design and ViewModel can be implemented in parallel independently.
** Can add new Views or change current View easily.
** Different views for different devices with a common ViewModel.
** Allow unit-test ViewModel independently without UI environments.

h4. For details

[Envisage ZK 6: The Next Generation Data Binding System|http://books.zkoss.org/wiki/Small_Talks/2011/October/Envisage_ZK_6:_The_Next_Generation_Data_Binding_System]









